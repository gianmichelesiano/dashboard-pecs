// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  AnalyzeProcessPhraseData,
  AnalyzeProcessPhraseResponse,
  AnalyzeGetOptionsData,
  AnalyzeGetOptionsResponse,
  CategoriesGetAllCategoriesData,
  CategoriesGetAllCategoriesResponse,
  CategoriesCreateCategoryData,
  CategoriesCreateCategoryResponse,
  CategoriesGetItalianCategoriesWithPecsCountData,
  CategoriesGetItalianCategoriesWithPecsCountResponse,
  CategoriesGetCategoriesByLanguageData,
  CategoriesGetCategoriesByLanguageResponse,
  CategoriesGetCategoryData,
  CategoriesGetCategoryResponse,
  CategoriesUpdateCategoryData,
  CategoriesUpdateCategoryResponse,
  CategoriesDeleteCategoryData,
  CategoriesDeleteCategoryResponse,
  CategoriesGetPecsInCategoryData,
  CategoriesGetPecsInCategoryResponse,
  CategoriesAddPecsToCategoryData,
  CategoriesAddPecsToCategoryResponse,
  CategoriesRemovePecsFromCategoryData,
  CategoriesRemovePecsFromCategoryResponse,
  CollectionsGetAllCollectionsData,
  CollectionsGetAllCollectionsResponse,
  CollectionsCreateCollectionData,
  CollectionsCreateCollectionResponse,
  CollectionsGetCollectionsByLanguageData,
  CollectionsGetCollectionsByLanguageResponse,
  CollectionsGetCollectionData,
  CollectionsGetCollectionResponse,
  CollectionsUpdateCollectionData,
  CollectionsUpdateCollectionResponse,
  CollectionsDeleteCollectionData,
  CollectionsDeleteCollectionResponse,
  CollectionsGetPhrasesInCollectionData,
  CollectionsGetPhrasesInCollectionResponse,
  CollectionsAddPhraseToCollectionData,
  CollectionsAddPhraseToCollectionResponse,
  CollectionsRemovePhraseFromCollectionData,
  CollectionsRemovePhraseFromCollectionResponse,
  FavoritesGetFavoritePecsData,
  FavoritesGetFavoritePecsResponse,
  FavoritesAddPecsToFavoritesData,
  FavoritesAddPecsToFavoritesResponse,
  FavoritesRemovePecsFromFavoritesData,
  FavoritesRemovePecsFromFavoritesResponse,
  FavoritesGetFavoritePhrasesData,
  FavoritesGetFavoritePhrasesResponse,
  FavoritesAddPhraseToFavoritesData,
  FavoritesAddPhraseToFavoritesResponse,
  FavoritesRemovePhraseFromFavoritesData,
  FavoritesRemovePhraseFromFavoritesResponse,
  ImagesUploadImageData,
  ImagesUploadImageResponse,
  ImagesGetSupabaseStatusResponse,
  ImagesListImagesResponse,
  ImagesGetImageData,
  ImagesGetImageResponse,
  ImagesDeleteImageData,
  ImagesDeleteImageResponse,
  ItemsReadItemsData,
  ItemsReadItemsResponse,
  ItemsCreateItemData,
  ItemsCreateItemResponse,
  ItemsReadItemData,
  ItemsReadItemResponse,
  ItemsUpdateItemData,
  ItemsUpdateItemResponse,
  ItemsDeleteItemData,
  ItemsDeleteItemResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  NomiReadNomiData,
  NomiReadNomiResponse,
  NomiCreateNomeData,
  NomiCreateNomeResponse,
  NomiReadNomeData,
  NomiReadNomeResponse,
  NomiUpdateNomeData,
  NomiUpdateNomeResponse,
  NomiDeleteNomeData,
  NomiDeleteNomeResponse,
  NomiReadNomiByPictogramData,
  NomiReadNomiByPictogramResponse,
  NomiSearchNomiData,
  NomiSearchNomiResponse,
  PecsGetAllPecsData,
  PecsGetAllPecsResponse,
  PecsCreatePecsData,
  PecsCreatePecsResponse,
  PecsGetCustomPecsData,
  PecsGetCustomPecsResponse,
  PecsGetPecsByLanguageData,
  PecsGetPecsByLanguageResponse,
  PecsGetPecsData,
  PecsGetPecsResponse,
  PecsUpdatePecsData,
  PecsUpdatePecsResponse,
  PecsDeletePecsData,
  PecsDeletePecsResponse,
  PecsGetPecsCategoriesData,
  PecsGetPecsCategoriesResponse,
  PhrasesGetAllPhrasesData,
  PhrasesGetAllPhrasesResponse,
  PhrasesCreatePhraseData,
  PhrasesCreatePhraseResponse,
  PhrasesGetPhrasesByLanguageData,
  PhrasesGetPhrasesByLanguageResponse,
  PhrasesGetPhraseData,
  PhrasesGetPhraseResponse,
  PhrasesUpdatePhraseData,
  PhrasesUpdatePhraseResponse,
  PhrasesDeletePhraseData,
  PhrasesDeletePhraseResponse,
  PhrasesGetPecsInPhraseData,
  PhrasesGetPecsInPhraseResponse,
  PhrasesAddPecsToPhraseData,
  PhrasesAddPecsToPhraseResponse,
  PhrasesUpdatePecsPositionInPhraseData,
  PhrasesUpdatePecsPositionInPhraseResponse,
  PhrasesRemovePecsFromPhraseData,
  PhrasesRemovePecsFromPhraseResponse,
  PhrasesGetPecsImageUrlData,
  PhrasesGetPecsImageUrlResponse,
  PostsReadPostsData,
  PostsReadPostsResponse,
  PostsCreatePostData,
  PostsCreatePostResponse,
  PostsHelloWorldResponse,
  PostsReadPostData,
  PostsReadPostResponse,
  PostsUpdatePostData,
  PostsUpdatePostResponse,
  PostsDeletePostData,
  PostsDeletePostResponse,
  PrivateCreateUserData,
  PrivateCreateUserResponse,
  TranslationsGetPecsTranslationsData,
  TranslationsGetPecsTranslationsResponse,
  TranslationsAddPecsTranslationData,
  TranslationsAddPecsTranslationResponse,
  TranslationsUpdatePecsTranslationData,
  TranslationsUpdatePecsTranslationResponse,
  TranslationsGetCategoryTranslationsData,
  TranslationsGetCategoryTranslationsResponse,
  TranslationsAddCategoryTranslationData,
  TranslationsAddCategoryTranslationResponse,
  TranslationsUpdateCategoryTranslationData,
  TranslationsUpdateCategoryTranslationResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersReadUserMeResponse,
  UsersDeleteUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
  UtilsHealthCheckResponse,
  UtilsDbCheckResponse,
} from "./types.gen"

export class AnalyzeService {
  /**
   * Process Phrase
   * Process a phrase and return matching pictograms
   *
   * This endpoint tokenizes a phrase and finds matching pictograms for each token.
   * You can specify a language to use language-specific pictogram data.
   *
   * Available languages:
   * - it: Italian (default)
   * - en: English
   * - de: German
   * - es: Spanish
   * - fr: French
   *
   * Args:
   * request: Phrase request object containing the phrase to process
   * language: Language code for pictogram search (e.g., 'it', 'en', 'de', 'es', 'fr')
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.language Language code for pictogram search
   * @returns PictogramResponse Successful Response
   * @throws ApiError
   */
  public static processPhrase(
    data: AnalyzeProcessPhraseData,
  ): CancelablePromise<AnalyzeProcessPhraseResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/analyze/process-phrase",
      query: {
        language: data.language,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Options
   * Get pictogram options for a word
   *
   * This endpoint finds pictogram options for a given word.
   * You can specify a language to use language-specific pictogram data.
   *
   * Available languages:
   * - it: Italian (default)
   * - en: English
   * - de: German
   * - es: Spanish
   * - fr: French
   *
   * Args:
   * request: Word request object containing the word to find options for
   * language: Language code for pictogram search (e.g., 'it', 'en', 'de', 'es', 'fr')
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.language Language code for pictogram search
   * @returns PictogramResponse Successful Response
   * @throws ApiError
   */
  public static getOptions(
    data: AnalyzeGetOptionsData,
  ): CancelablePromise<AnalyzeGetOptionsResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/analyze/get-options",
      query: {
        language: data.language,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class CategoriesService {
  /**
   * Get All Categories
   * Retrieve all categories.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns PECSCategoryRead Successful Response
   * @throws ApiError
   */
  public static getAllCategories(
    data: CategoriesGetAllCategoriesData = {},
  ): CancelablePromise<CategoriesGetAllCategoriesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/categories/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Category
   * Create a new category.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns PECSCategoryRead Successful Response
   * @throws ApiError
   */
  public static createCategory(
    data: CategoriesCreateCategoryData,
  ): CancelablePromise<CategoriesCreateCategoryResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/categories/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Italian Categories With Pecs Count
   * Retrieve Italian categories with pecs count.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @param data.name
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getItalianCategoriesWithPecsCount(
    data: CategoriesGetItalianCategoriesWithPecsCountData = {},
  ): CancelablePromise<CategoriesGetItalianCategoriesWithPecsCountResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/categories/language/it/with_pecs_count",
      query: {
        skip: data.skip,
        limit: data.limit,
        name: data.name,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Categories By Language
   * Retrieve categories in a specific language.
   * @param data The data for the request.
   * @param data.code
   * @param data.skip
   * @param data.limit
   * @param data.name
   * @returns PECSCategoryRead Successful Response
   * @throws ApiError
   */
  public static getCategoriesByLanguage(
    data: CategoriesGetCategoriesByLanguageData,
  ): CancelablePromise<CategoriesGetCategoriesByLanguageResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/categories/language/{code}",
      path: {
        code: data.code,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
        name: data.name,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Category
   * Retrieve a specific category by ID.
   * @param data The data for the request.
   * @param data.categoryId
   * @returns PECSCategoryRead Successful Response
   * @throws ApiError
   */
  public static getCategory(
    data: CategoriesGetCategoryData,
  ): CancelablePromise<CategoriesGetCategoryResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/categories/{category_id}",
      path: {
        category_id: data.categoryId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Category
   * Update a category.
   * @param data The data for the request.
   * @param data.categoryId
   * @param data.requestBody
   * @returns PECSCategoryRead Successful Response
   * @throws ApiError
   */
  public static updateCategory(
    data: CategoriesUpdateCategoryData,
  ): CancelablePromise<CategoriesUpdateCategoryResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/categories/{category_id}",
      path: {
        category_id: data.categoryId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Category
   * Delete a category.
   * @param data The data for the request.
   * @param data.categoryId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteCategory(
    data: CategoriesDeleteCategoryData,
  ): CancelablePromise<CategoriesDeleteCategoryResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/categories/{category_id}",
      path: {
        category_id: data.categoryId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Pecs In Category
   * Retrieve all PECS in a specific category.
   * @param data The data for the request.
   * @param data.categoryId
   * @param data.skip
   * @param data.limit
   * @returns PECSRead Successful Response
   * @throws ApiError
   */
  public static getPecsInCategory(
    data: CategoriesGetPecsInCategoryData,
  ): CancelablePromise<CategoriesGetPecsInCategoryResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/categories/{category_id}/pecs",
      path: {
        category_id: data.categoryId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Add Pecs To Category
   * Associate a PECS with a category.
   * @param data The data for the request.
   * @param data.categoryId
   * @param data.pecsId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static addPecsToCategory(
    data: CategoriesAddPecsToCategoryData,
  ): CancelablePromise<CategoriesAddPecsToCategoryResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/categories/{category_id}/pecs/{pecs_id}",
      path: {
        category_id: data.categoryId,
        pecs_id: data.pecsId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Remove Pecs From Category
   * Remove a PECS from a category.
   * @param data The data for the request.
   * @param data.categoryId
   * @param data.pecsId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static removePecsFromCategory(
    data: CategoriesRemovePecsFromCategoryData,
  ): CancelablePromise<CategoriesRemovePecsFromCategoryResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/categories/{category_id}/pecs/{pecs_id}",
      path: {
        category_id: data.categoryId,
        pecs_id: data.pecsId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class CollectionsService {
  /**
   * Get All Collections
   * Retrieve all collections.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns CollectionRead Successful Response
   * @throws ApiError
   */
  public static getAllCollections(
    data: CollectionsGetAllCollectionsData = {},
  ): CancelablePromise<CollectionsGetAllCollectionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/collections/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Collection
   * Create a new collection.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns CollectionRead Successful Response
   * @throws ApiError
   */
  public static createCollection(
    data: CollectionsCreateCollectionData,
  ): CancelablePromise<CollectionsCreateCollectionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/collections/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Collections By Language
   * Retrieve collections in a specific language.
   * @param data The data for the request.
   * @param data.code
   * @param data.skip
   * @param data.limit
   * @param data.name
   * @returns CollectionRead Successful Response
   * @throws ApiError
   */
  public static getCollectionsByLanguage(
    data: CollectionsGetCollectionsByLanguageData,
  ): CancelablePromise<CollectionsGetCollectionsByLanguageResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/collections/language/{code}",
      path: {
        code: data.code,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
        name: data.name,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Collection
   * Retrieve a specific collection by ID.
   * @param data The data for the request.
   * @param data.collectionId
   * @returns CollectionRead Successful Response
   * @throws ApiError
   */
  public static getCollection(
    data: CollectionsGetCollectionData,
  ): CancelablePromise<CollectionsGetCollectionResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/collections/{collection_id}",
      path: {
        collection_id: data.collectionId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Collection
   * Update a collection.
   * @param data The data for the request.
   * @param data.collectionId
   * @param data.requestBody
   * @returns CollectionRead Successful Response
   * @throws ApiError
   */
  public static updateCollection(
    data: CollectionsUpdateCollectionData,
  ): CancelablePromise<CollectionsUpdateCollectionResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/collections/{collection_id}",
      path: {
        collection_id: data.collectionId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Collection
   * Delete a collection.
   * @param data The data for the request.
   * @param data.collectionId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteCollection(
    data: CollectionsDeleteCollectionData,
  ): CancelablePromise<CollectionsDeleteCollectionResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/collections/{collection_id}",
      path: {
        collection_id: data.collectionId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Phrases In Collection
   * Retrieve all phrases in a specific collection.
   * @param data The data for the request.
   * @param data.collectionId
   * @param data.skip
   * @param data.limit
   * @returns PhraseRead Successful Response
   * @throws ApiError
   */
  public static getPhrasesInCollection(
    data: CollectionsGetPhrasesInCollectionData,
  ): CancelablePromise<CollectionsGetPhrasesInCollectionResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/collections/{collection_id}/phrases",
      path: {
        collection_id: data.collectionId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Add Phrase To Collection
   * Add a phrase to a collection.
   * @param data The data for the request.
   * @param data.collectionId
   * @param data.phraseId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static addPhraseToCollection(
    data: CollectionsAddPhraseToCollectionData,
  ): CancelablePromise<CollectionsAddPhraseToCollectionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/collections/{collection_id}/phrases/{phrase_id}",
      path: {
        collection_id: data.collectionId,
        phrase_id: data.phraseId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Remove Phrase From Collection
   * Remove a phrase from a collection.
   * @param data The data for the request.
   * @param data.collectionId
   * @param data.phraseId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static removePhraseFromCollection(
    data: CollectionsRemovePhraseFromCollectionData,
  ): CancelablePromise<CollectionsRemovePhraseFromCollectionResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/collections/{collection_id}/phrases/{phrase_id}",
      path: {
        collection_id: data.collectionId,
        phrase_id: data.phraseId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class FavoritesService {
  /**
   * Get Favorite Pecs
   * Retrieve all favorite PECS for a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns PECSRead Successful Response
   * @throws ApiError
   */
  public static getFavoritePecs(
    data: FavoritesGetFavoritePecsData,
  ): CancelablePromise<FavoritesGetFavoritePecsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}/favorites/pecs",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Add Pecs To Favorites
   * Add a PECS to user's favorites.
   * @param data The data for the request.
   * @param data.userId
   * @param data.pecsId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static addPecsToFavorites(
    data: FavoritesAddPecsToFavoritesData,
  ): CancelablePromise<FavoritesAddPecsToFavoritesResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/{user_id}/favorites/pecs/{pecs_id}",
      path: {
        user_id: data.userId,
        pecs_id: data.pecsId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Remove Pecs From Favorites
   * Remove a PECS from user's favorites.
   * @param data The data for the request.
   * @param data.userId
   * @param data.pecsId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static removePecsFromFavorites(
    data: FavoritesRemovePecsFromFavoritesData,
  ): CancelablePromise<FavoritesRemovePecsFromFavoritesResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}/favorites/pecs/{pecs_id}",
      path: {
        user_id: data.userId,
        pecs_id: data.pecsId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Favorite Phrases
   * Retrieve all favorite phrases for a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns PhraseRead Successful Response
   * @throws ApiError
   */
  public static getFavoritePhrases(
    data: FavoritesGetFavoritePhrasesData,
  ): CancelablePromise<FavoritesGetFavoritePhrasesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}/favorites/phrases",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Add Phrase To Favorites
   * Add a phrase to user's favorites.
   * @param data The data for the request.
   * @param data.userId
   * @param data.phraseId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static addPhraseToFavorites(
    data: FavoritesAddPhraseToFavoritesData,
  ): CancelablePromise<FavoritesAddPhraseToFavoritesResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/{user_id}/favorites/phrases/{phrase_id}",
      path: {
        user_id: data.userId,
        phrase_id: data.phraseId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Remove Phrase From Favorites
   * Remove a phrase from user's favorites.
   * @param data The data for the request.
   * @param data.userId
   * @param data.phraseId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static removePhraseFromFavorites(
    data: FavoritesRemovePhraseFromFavoritesData,
  ): CancelablePromise<FavoritesRemovePhraseFromFavoritesResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}/favorites/phrases/{phrase_id}",
      path: {
        user_id: data.userId,
        phrase_id: data.phraseId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class ImagesService {
  /**
   * Upload Image
   * Upload an image to Supabase Storage without authentication.
   * @param data The data for the request.
   * @param data.formData
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static uploadImage(
    data: ImagesUploadImageData,
  ): CancelablePromise<ImagesUploadImageResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/images/upload",
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Supabase Status
   * Get Supabase status information to help diagnose issues.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getSupabaseStatus(): CancelablePromise<ImagesGetSupabaseStatusResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/images/supabase-status",
    })
  }

  /**
   * List Images
   * List all images in the Supabase bucket.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static listImages(): CancelablePromise<ImagesListImagesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/images/",
    })
  }

  /**
   * Get Image
   * Get a specific image by filename.
   * @param data The data for the request.
   * @param data.filename
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getImage(
    data: ImagesGetImageData,
  ): CancelablePromise<ImagesGetImageResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/images/{filename}",
      path: {
        filename: data.filename,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Image
   * Delete an image by filename.
   * @param data The data for the request.
   * @param data.filename
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteImage(
    data: ImagesDeleteImageData,
  ): CancelablePromise<ImagesDeleteImageResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/images/{filename}",
      path: {
        filename: data.filename,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class ItemsService {
  /**
   * Read Items
   * Retrieve items.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns ItemsPublic Successful Response
   * @throws ApiError
   */
  public static readItems(
    data: ItemsReadItemsData = {},
  ): CancelablePromise<ItemsReadItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Item
   * Create new item.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static createItem(
    data: ItemsCreateItemData,
  ): CancelablePromise<ItemsCreateItemResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/items/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Item
   * Get item by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static readItem(
    data: ItemsReadItemData,
  ): CancelablePromise<ItemsReadItemResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Item
   * Update an item.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static updateItem(
    data: ItemsUpdateItemData,
  ): CancelablePromise<ItemsUpdateItemResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Item
   * Delete an item.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteItem(
    data: ItemsDeleteItemData,
  ): CancelablePromise<ItemsDeleteItemResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class NomiService {
  /**
   * Read Nomi
   * Retrieve nomi (names) with optional filtering.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @param data.lang
   * @param data.pictogramId
   * @returns Nome Successful Response
   * @throws ApiError
   */
  public static readNomi(
    data: NomiReadNomiData = {},
  ): CancelablePromise<NomiReadNomiResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/nomi/",
      query: {
        skip: data.skip,
        limit: data.limit,
        lang: data.lang,
        pictogram_id: data.pictogramId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Nome
   * Create new nome (name) with the specified pictogram_id.
   * No validation is performed to check if the pictogram exists.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Nome Successful Response
   * @throws ApiError
   */
  public static createNome(
    data: NomiCreateNomeData,
  ): CancelablePromise<NomiCreateNomeResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/nomi/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Nome
   * Get nome by ID.
   * @param data The data for the request.
   * @param data.nomeId
   * @returns Nome Successful Response
   * @throws ApiError
   */
  public static readNome(
    data: NomiReadNomeData,
  ): CancelablePromise<NomiReadNomeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/nomi/{nome_id}",
      path: {
        nome_id: data.nomeId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Nome
   * Update a nome.
   * @param data The data for the request.
   * @param data.nomeId
   * @param data.requestBody
   * @returns Nome Successful Response
   * @throws ApiError
   */
  public static updateNome(
    data: NomiUpdateNomeData,
  ): CancelablePromise<NomiUpdateNomeResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/nomi/{nome_id}",
      path: {
        nome_id: data.nomeId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Nome
   * Delete a nome.
   * @param data The data for the request.
   * @param data.nomeId
   * @returns Nome Successful Response
   * @throws ApiError
   */
  public static deleteNome(
    data: NomiDeleteNomeData,
  ): CancelablePromise<NomiDeleteNomeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/nomi/{nome_id}",
      path: {
        nome_id: data.nomeId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Nomi By Pictogram
   * Get all nomi for a specific pictogram_id, optionally filtered by language.
   * @param data The data for the request.
   * @param data.pictogramId
   * @param data.lang
   * @returns Nome Successful Response
   * @throws ApiError
   */
  public static readNomiByPictogram(
    data: NomiReadNomiByPictogramData,
  ): CancelablePromise<NomiReadNomiByPictogramResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/nomi/pictogram/{pictogram_id}",
      path: {
        pictogram_id: data.pictogramId,
      },
      query: {
        lang: data.lang,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Search Nomi
   * Search nomi by name.
   * @param data The data for the request.
   * @param data.q Search query
   * @param data.lang
   * @returns Nome Successful Response
   * @throws ApiError
   */
  public static searchNomi(
    data: NomiSearchNomiData,
  ): CancelablePromise<NomiSearchNomiResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/nomi/search/",
      query: {
        q: data.q,
        lang: data.lang,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PecsService {
  /**
   * Get All Pecs
   * Retrieve all PECS with optional language filter.
   * @param data The data for the request.
   * @param data.language Filter by language code
   * @param data.skip
   * @param data.limit
   * @returns PECSRead Successful Response
   * @throws ApiError
   */
  public static getAllPecs(
    data: PecsGetAllPecsData = {},
  ): CancelablePromise<PecsGetAllPecsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/pecs/",
      query: {
        language: data.language,
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Pecs
   * Create a new PECS.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns PECSRead Successful Response
   * @throws ApiError
   */
  public static createPecs(
    data: PecsCreatePecsData,
  ): CancelablePromise<PecsCreatePecsResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/pecs/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Custom Pecs
   * Retrieve custom PECS created by the current user.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns PECSRead Successful Response
   * @throws ApiError
   */
  public static getCustomPecs(
    data: PecsGetCustomPecsData = {},
  ): CancelablePromise<PecsGetCustomPecsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/pecs/custom",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Pecs By Language
   * Retrieve PECS in a specific language.
   * @param data The data for the request.
   * @param data.code
   * @param data.skip
   * @param data.limit
   * @returns PECSRead Successful Response
   * @throws ApiError
   */
  public static getPecsByLanguage(
    data: PecsGetPecsByLanguageData,
  ): CancelablePromise<PecsGetPecsByLanguageResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/pecs/language/{code}",
      path: {
        code: data.code,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Pecs
   * Retrieve a specific PECS by ID.
   * @param data The data for the request.
   * @param data.pecsId
   * @returns PECSRead Successful Response
   * @throws ApiError
   */
  public static getPecs(
    data: PecsGetPecsData,
  ): CancelablePromise<PecsGetPecsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/pecs/{pecs_id}",
      path: {
        pecs_id: data.pecsId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Pecs
   * Update a PECS.
   * @param data The data for the request.
   * @param data.pecsId
   * @param data.requestBody
   * @returns PECSRead Successful Response
   * @throws ApiError
   */
  public static updatePecs(
    data: PecsUpdatePecsData,
  ): CancelablePromise<PecsUpdatePecsResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/pecs/{pecs_id}",
      path: {
        pecs_id: data.pecsId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Pecs
   * Delete a PECS.
   * @param data The data for the request.
   * @param data.pecsId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deletePecs(
    data: PecsDeletePecsData,
  ): CancelablePromise<PecsDeletePecsResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/pecs/{pecs_id}",
      path: {
        pecs_id: data.pecsId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Pecs Categories
   * Retrieve all categories with their translations associated with a specific PECS.
   * @param data The data for the request.
   * @param data.pecsId
   * @returns CategoryWithTranslations Successful Response
   * @throws ApiError
   */
  public static getPecsCategories(
    data: PecsGetPecsCategoriesData,
  ): CancelablePromise<PecsGetPecsCategoriesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/pecs/{pecs_id}/category",
      path: {
        pecs_id: data.pecsId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PhrasesService {
  /**
   * Get All Phrases
   * Retrieve all phrases.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns PhraseRead Successful Response
   * @throws ApiError
   */
  public static getAllPhrases(
    data: PhrasesGetAllPhrasesData = {},
  ): CancelablePromise<PhrasesGetAllPhrasesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/phrases/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Phrase
   * Create a new phrase.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns PhraseRead Successful Response
   * @throws ApiError
   */
  public static createPhrase(
    data: PhrasesCreatePhraseData,
  ): CancelablePromise<PhrasesCreatePhraseResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/phrases/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Phrases By Language
   * Retrieve phrases in a specific language.
   * @param data The data for the request.
   * @param data.code
   * @param data.skip
   * @param data.limit
   * @returns PhraseRead Successful Response
   * @throws ApiError
   */
  public static getPhrasesByLanguage(
    data: PhrasesGetPhrasesByLanguageData,
  ): CancelablePromise<PhrasesGetPhrasesByLanguageResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/phrases/language/{code}",
      path: {
        code: data.code,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Phrase
   * Retrieve a specific phrase by ID.
   * @param data The data for the request.
   * @param data.phraseId
   * @returns PhraseRead Successful Response
   * @throws ApiError
   */
  public static getPhrase(
    data: PhrasesGetPhraseData,
  ): CancelablePromise<PhrasesGetPhraseResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/phrases/{phrase_id}",
      path: {
        phrase_id: data.phraseId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Phrase
   * Update a phrase.
   * @param data The data for the request.
   * @param data.phraseId
   * @param data.requestBody
   * @returns PhraseRead Successful Response
   * @throws ApiError
   */
  public static updatePhrase(
    data: PhrasesUpdatePhraseData,
  ): CancelablePromise<PhrasesUpdatePhraseResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/phrases/{phrase_id}",
      path: {
        phrase_id: data.phraseId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Phrase
   * Delete a phrase.
   * @param data The data for the request.
   * @param data.phraseId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deletePhrase(
    data: PhrasesDeletePhraseData,
  ): CancelablePromise<PhrasesDeletePhraseResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/phrases/{phrase_id}",
      path: {
        phrase_id: data.phraseId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Pecs In Phrase
   * Retrieve all PECS in a specific phrase with their positions.
   * @param data The data for the request.
   * @param data.phraseId
   * @returns PhrasePECSRead Successful Response
   * @throws ApiError
   */
  public static getPecsInPhrase(
    data: PhrasesGetPecsInPhraseData,
  ): CancelablePromise<PhrasesGetPecsInPhraseResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/phrases/{phrase_id}/pecs",
      path: {
        phrase_id: data.phraseId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Add Pecs To Phrase
   * Add a PECS to a phrase at a specific position.
   * @param data The data for the request.
   * @param data.phraseId
   * @param data.pecsId
   * @param data.position Position of the PECS in the phrase
   * @returns PhrasePECSRead Successful Response
   * @throws ApiError
   */
  public static addPecsToPhrase(
    data: PhrasesAddPecsToPhraseData,
  ): CancelablePromise<PhrasesAddPecsToPhraseResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/phrases/{phrase_id}/pecs/{pecs_id}",
      path: {
        phrase_id: data.phraseId,
        pecs_id: data.pecsId,
      },
      query: {
        position: data.position,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Pecs Position In Phrase
   * Update the position of a PECS in a phrase.
   * @param data The data for the request.
   * @param data.phraseId
   * @param data.pecsId
   * @param data.position New position of the PECS in the phrase
   * @returns PhrasePECSRead Successful Response
   * @throws ApiError
   */
  public static updatePecsPositionInPhrase(
    data: PhrasesUpdatePecsPositionInPhraseData,
  ): CancelablePromise<PhrasesUpdatePecsPositionInPhraseResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/phrases/{phrase_id}/pecs/{pecs_id}",
      path: {
        phrase_id: data.phraseId,
        pecs_id: data.pecsId,
      },
      query: {
        position: data.position,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Remove Pecs From Phrase
   * Remove a PECS from a phrase.
   * @param data The data for the request.
   * @param data.phraseId
   * @param data.pecsId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static removePecsFromPhrase(
    data: PhrasesRemovePecsFromPhraseData,
  ): CancelablePromise<PhrasesRemovePecsFromPhraseResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/phrases/{phrase_id}/pecs/{pecs_id}",
      path: {
        phrase_id: data.phraseId,
        pecs_id: data.pecsId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Pecs Image Url
   * Get the image URL for a specific PECS by ID.
   * @param data The data for the request.
   * @param data.pecsId
   * @returns ImageURLResponse Successful Response
   * @throws ApiError
   */
  public static getPecsImageUrl(
    data: PhrasesGetPecsImageUrlData,
  ): CancelablePromise<PhrasesGetPecsImageUrlResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/phrases/pecs/{pecs_id}/image",
      path: {
        pecs_id: data.pecsId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PostsService {
  /**
   * Read Posts
   * Retrieve posts.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns PostsPublic Successful Response
   * @throws ApiError
   */
  public static readPosts(
    data: PostsReadPostsData = {},
  ): CancelablePromise<PostsReadPostsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/posts/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Post
   * Create new post.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns PostPublic Successful Response
   * @throws ApiError
   */
  public static createPost(
    data: PostsCreatePostData,
  ): CancelablePromise<PostsCreatePostResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/posts/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Hello World
   * Simple hello world endpoint for testing.
   * This endpoint does not require authentication but uses a database session.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static helloWorld(): CancelablePromise<PostsHelloWorldResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/posts/hello-world",
    })
  }

  /**
   * Read Post
   * Get post by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns PostPublic Successful Response
   * @throws ApiError
   */
  public static readPost(
    data: PostsReadPostData,
  ): CancelablePromise<PostsReadPostResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/posts/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Post
   * Update a post.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns PostPublic Successful Response
   * @throws ApiError
   */
  public static updatePost(
    data: PostsUpdatePostData,
  ): CancelablePromise<PostsUpdatePostResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/posts/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Post
   * Delete a post.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deletePost(
    data: PostsDeletePostData,
  ): CancelablePromise<PostsDeletePostResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/posts/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PrivateService {
  /**
   * Create User
   * Create a new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: PrivateCreateUserData,
  ): CancelablePromise<PrivateCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class TranslationsService {
  /**
   * Get Pecs Translations
   * Retrieve all translations for a specific PECS.
   * @param data The data for the request.
   * @param data.pecsId
   * @returns PECSTranslationRead Successful Response
   * @throws ApiError
   */
  public static getPecsTranslations(
    data: TranslationsGetPecsTranslationsData,
  ): CancelablePromise<TranslationsGetPecsTranslationsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/translations/pecs/{pecs_id}",
      path: {
        pecs_id: data.pecsId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Add Pecs Translation
   * Add a translation to a PECS.
   *
   * Required fields in the request body:
   * - language_code: The language code (e.g., "en", "it", "fr")
   * - name: The translated name
   * @param data The data for the request.
   * @param data.pecsId
   * @param data.requestBody
   * @returns PECSTranslationRead Successful Response
   * @throws ApiError
   */
  public static addPecsTranslation(
    data: TranslationsAddPecsTranslationData,
  ): CancelablePromise<TranslationsAddPecsTranslationResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/translations/pecs/{pecs_id}",
      path: {
        pecs_id: data.pecsId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Pecs Translation
   * Update a translation for a PECS.
   *
   * Required fields in the request body:
   * - name: The translated name
   * @param data The data for the request.
   * @param data.pecsId
   * @param data.languageCode
   * @param data.requestBody
   * @returns PECSTranslationRead Successful Response
   * @throws ApiError
   */
  public static updatePecsTranslation(
    data: TranslationsUpdatePecsTranslationData,
  ): CancelablePromise<TranslationsUpdatePecsTranslationResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/translations/pecs/{pecs_id}/{language_code}",
      path: {
        pecs_id: data.pecsId,
        language_code: data.languageCode,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Category Translations
   * Retrieve all translations for a specific category.
   * @param data The data for the request.
   * @param data.categoryId
   * @returns CategoryTranslationRead Successful Response
   * @throws ApiError
   */
  public static getCategoryTranslations(
    data: TranslationsGetCategoryTranslationsData,
  ): CancelablePromise<TranslationsGetCategoryTranslationsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/translations/categories/{category_id}",
      path: {
        category_id: data.categoryId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Add Category Translation
   * Add a translation to a category.
   *
   * Required fields in the request body:
   * - language_code: The language code (e.g., "en", "it", "fr")
   * - name: The translated name
   * @param data The data for the request.
   * @param data.categoryId
   * @param data.requestBody
   * @returns CategoryTranslationRead Successful Response
   * @throws ApiError
   */
  public static addCategoryTranslation(
    data: TranslationsAddCategoryTranslationData,
  ): CancelablePromise<TranslationsAddCategoryTranslationResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/translations/categories/{category_id}",
      path: {
        category_id: data.categoryId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Category Translation
   * Update a translation for a category.
   *
   * Required fields in the request body:
   * - name: The translated name
   * @param data The data for the request.
   * @param data.categoryId
   * @param data.languageCode
   * @param data.requestBody
   * @returns CategoryTranslationRead Successful Response
   * @throws ApiError
   */
  public static updateCategoryTranslation(
    data: TranslationsUpdateCategoryTranslationData,
  ): CancelablePromise<TranslationsUpdateCategoryTranslationResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/translations/categories/{category_id}/{language_code}",
      path: {
        category_id: data.categoryId,
        language_code: data.languageCode,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }

  /**
   * Db Check
   * Check if the application is connected to the database.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static dbCheck(): CancelablePromise<UtilsDbCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/db-check/",
    })
  }
}
