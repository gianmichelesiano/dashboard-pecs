// This file is auto-generated by @hey-api/openapi-ts

export type Body_images_upload_image = {
  file: Blob | File
}

export type Body_login_login_access_token = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

export type CategoryTranslationRead = {
  language_code: string
  name: string
  id: string
  category_id: string
}

export type CategoryTranslationResponse = {
  language_code: string
  name: string
}

export type CategoryWithTranslations = {
  id: string
  translations: Array<CategoryTranslationResponse>
}

export type CollectionCreate = {
  is_custom?: boolean
  is_visible?: boolean
  name_custom?: string | null
  icon?: string | null
  color?: string | null
  user_id: string
  translations?: Array<{
    [key: string]: unknown
  }> | null
  phrase_ids?: Array<string> | null
}

export type CollectionRead = {
  is_custom?: boolean
  is_visible?: boolean
  name_custom?: string | null
  icon?: string | null
  color?: string | null
  id: string
  created_at: string
  user_id: string
  translations?: Array<CollectionTranslationRead>
  phrase_count?: number | null
}

export type CollectionTranslationRead = {
  language_code: string
  name: string
  id: string
  collection_id: string
}

export type CollectionUpdate = {
  is_custom?: boolean | null
  is_visible?: boolean | null
  name_custom?: string | null
  icon?: string | null
  color?: string | null
  translations?: Array<{
    [key: string]: unknown
  }> | null
  phrase_ids?: Array<string> | null
}

export type HTTPValidationError = {
  detail?: Array<ValidationError>
}

export type ImageURLResponse = {
  image_url: string
}

export type ItemCreate = {
  title: string
  description?: string | null
}

export type ItemPublic = {
  title: string
  description?: string | null
  id: string
  owner_id: string
}

export type ItemsPublic = {
  data: Array<ItemPublic>
  count: number
}

export type ItemUpdate = {
  title?: string | null
  description?: string | null
}

export type Message = {
  message: string
}

export type NewPassword = {
  token: string
  new_password: string
}

/**
 * Nome model representing a name for a pictogram in a specific language
 */
export type Nome = {
  pictogram_id: number
  name: string
  lang: string
  id?: number | null
}

/**
 * Model for creating a new nome
 */
export type NomeCreate = {
  pictogram_id: number
  name: string
  lang: string
}

/**
 * Model for updating an existing nome
 */
export type NomeUpdate = {
  pictogram_id?: number | null
  name?: string | null
  lang?: string | null
}

export type PECSCategoryCreate = {
  parent_id?: string | null
  icon?: string | null
  color?: string | null
  is_custom?: boolean | null
  is_visible?: boolean | null
  name_custom?: string | null
  name?: string | null
  lang?: string | null
  translations?: Array<{
    [key: string]: unknown
  }> | null
}

export type PECSCategoryRead = {
  parent_id?: string | null
  icon?: string | null
  color?: string | null
  is_custom?: boolean | null
  is_visible?: boolean | null
  name_custom?: string | null
  id: string
  created_at: string
  translations?: Array<CategoryTranslationRead>
}

export type PECSCategoryUpdate = {
  parent_id?: string | null
  icon?: string | null
  color?: string | null
  is_custom?: boolean | null
  is_visible?: boolean | null
  name_custom?: string | null
  translations?: Array<{
    [key: string]: unknown
  }> | null
}

export type PECSCreate = {
  image_url: string
  is_custom?: boolean
  name_custom?: string | null
  user_id?: string | null
  translations?: Array<{
    [key: string]: unknown
  }> | null
  category_ids?: Array<string> | null
}

export type PECSRead = {
  image_url: string
  is_custom?: boolean
  name_custom?: string | null
  id: string
  created_at: string
  user_id?: string | null
  translations?: Array<PECSTranslationRead>
}

export type PECSTranslationRead = {
  language_code: string
  name: string
  id: string
  pecs_id: string
}

export type PECSUpdate = {
  image_url?: string | null
  is_custom?: boolean | null
  name_custom?: string | null
  translations?: Array<{
    [key: string]: unknown
  }> | null
  category_ids?: Array<string> | null
}

export type PhraseCreate = {
  user_id: string
  translations?: Array<{
    [key: string]: unknown
  }> | null
  pecs_items?: Array<{
    [key: string]: unknown
  }> | null
}

export type PhrasePECSRead = {
  position: number
  phrase_id: string
  pecs_id: string
  pecs_info?: {
    [key: string]: unknown
  } | null
}

export type PhraseRead = {
  id: string
  created_at: string
  user_id: string
  translations?: Array<PhraseTranslationRead>
  pecs_items?: Array<PhrasePECSRead>
}

export type PhraseRequest = {
  phrase: string
}

export type PhraseTranslationRead = {
  language_code: string
  text: string
  audio_url?: string | null
  id: string
  phrase_id: string
}

export type PhraseUpdate = {
  translations?: Array<{
    [key: string]: unknown
  }> | null
  pecs_items?: Array<{
    [key: string]: unknown
  }> | null
}

export type PictogramResponse = {
  word: string | null
  id?: string | null
  url?: string | null
  error?: string | null
}

export type PostCreate = {
  title: string
  description: string
  created_at?: string
}

export type PostPublic = {
  title: string
  description: string
  created_at?: string
  id: string
  owner_id: string
}

export type PostsPublic = {
  data: Array<PostPublic>
  count: number
}

export type PostUpdate = {
  title?: string | null
  description?: string | null
}

export type PrivateUserCreate = {
  email: string
  password: string
  full_name: string
  is_verified?: boolean
}

export type Token = {
  access_token: string
  token_type?: string
}

export type UpdatePassword = {
  current_password: string
  new_password: string
}

export type UserCreate = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  lang?: string | null
  password: string
}

export type UserPublic = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  lang?: string | null
  id: string
}

export type UserRegister = {
  email: string
  password: string
  full_name?: string | null
  lang?: string | null
}

export type UsersPublic = {
  data: Array<UserPublic>
  count: number
}

export type UserUpdate = {
  email?: string | null
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  lang?: string | null
  password?: string | null
}

export type UserUpdateMe = {
  full_name?: string | null
  email?: string | null
  lang?: string | null
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type WordRequest = {
  word: string
}

export type AnalyzeProcessPhraseData = {
  /**
   * Language code for pictogram search
   */
  language?: string | null
  requestBody: PhraseRequest
}

export type AnalyzeProcessPhraseResponse = Array<PictogramResponse>

export type AnalyzeGetOptionsData = {
  /**
   * Language code for pictogram search
   */
  language?: string | null
  requestBody: WordRequest
}

export type AnalyzeGetOptionsResponse = Array<PictogramResponse>

export type CategoriesGetAllCategoriesData = {
  limit?: number
  skip?: number
}

export type CategoriesGetAllCategoriesResponse = Array<PECSCategoryRead>

export type CategoriesCreateCategoryData = {
  requestBody: PECSCategoryCreate
}

export type CategoriesCreateCategoryResponse = PECSCategoryRead

export type CategoriesGetItalianCategoriesWithPecsCountData = {
  limit?: number | null
  name?: string | null
  skip?: number
}

export type CategoriesGetItalianCategoriesWithPecsCountResponse = unknown

export type CategoriesGetCategoriesByLanguageData = {
  code: string
  limit?: number | null
  name?: string | null
  skip?: number
}

export type CategoriesGetCategoriesByLanguageResponse = Array<PECSCategoryRead>

export type CategoriesGetCategoryData = {
  categoryId: string
}

export type CategoriesGetCategoryResponse = PECSCategoryRead

export type CategoriesUpdateCategoryData = {
  categoryId: string
  requestBody: PECSCategoryUpdate
}

export type CategoriesUpdateCategoryResponse = PECSCategoryRead

export type CategoriesDeleteCategoryData = {
  categoryId: string
}

export type CategoriesDeleteCategoryResponse = Message

export type CategoriesGetPecsInCategoryData = {
  categoryId: string
  limit?: number
  skip?: number
}

export type CategoriesGetPecsInCategoryResponse = Array<PECSRead>

export type CategoriesAddPecsToCategoryData = {
  categoryId: string
  pecsId: string
}

export type CategoriesAddPecsToCategoryResponse = Message

export type CategoriesRemovePecsFromCategoryData = {
  categoryId: string
  pecsId: string
}

export type CategoriesRemovePecsFromCategoryResponse = Message

export type CollectionsGetAllCollectionsData = {
  limit?: number
  skip?: number
}

export type CollectionsGetAllCollectionsResponse = Array<CollectionRead>

export type CollectionsCreateCollectionData = {
  requestBody: CollectionCreate
}

export type CollectionsCreateCollectionResponse = CollectionRead

export type CollectionsGetCollectionsByLanguageData = {
  code: string
  limit?: number | null
  name?: string | null
  skip?: number
}

export type CollectionsGetCollectionsByLanguageResponse = Array<CollectionRead>

export type CollectionsGetCollectionData = {
  collectionId: string
}

export type CollectionsGetCollectionResponse = CollectionRead

export type CollectionsUpdateCollectionData = {
  collectionId: string
  requestBody: CollectionUpdate
}

export type CollectionsUpdateCollectionResponse = CollectionRead

export type CollectionsDeleteCollectionData = {
  collectionId: string
}

export type CollectionsDeleteCollectionResponse = Message

export type CollectionsGetPhrasesInCollectionData = {
  collectionId: string
  limit?: number
  skip?: number
}

export type CollectionsGetPhrasesInCollectionResponse = Array<PhraseRead>

export type CollectionsAddPhraseToCollectionData = {
  collectionId: string
  phraseId: string
}

export type CollectionsAddPhraseToCollectionResponse = Message

export type CollectionsRemovePhraseFromCollectionData = {
  collectionId: string
  phraseId: string
}

export type CollectionsRemovePhraseFromCollectionResponse = Message

export type FavoritesGetFavoritePecsData = {
  userId: string
}

export type FavoritesGetFavoritePecsResponse = Array<PECSRead>

export type FavoritesAddPecsToFavoritesData = {
  pecsId: string
  userId: string
}

export type FavoritesAddPecsToFavoritesResponse = Message

export type FavoritesRemovePecsFromFavoritesData = {
  pecsId: string
  userId: string
}

export type FavoritesRemovePecsFromFavoritesResponse = Message

export type FavoritesGetFavoritePhrasesData = {
  userId: string
}

export type FavoritesGetFavoritePhrasesResponse = Array<PhraseRead>

export type FavoritesAddPhraseToFavoritesData = {
  phraseId: string
  userId: string
}

export type FavoritesAddPhraseToFavoritesResponse = Message

export type FavoritesRemovePhraseFromFavoritesData = {
  phraseId: string
  userId: string
}

export type FavoritesRemovePhraseFromFavoritesResponse = Message

export type ImagesUploadImageData = {
  formData: Body_images_upload_image
}

export type ImagesUploadImageResponse = unknown

export type ImagesGetSupabaseStatusResponse = unknown

export type ImagesListImagesResponse = unknown

export type ImagesGetImageData = {
  filename: string
}

export type ImagesGetImageResponse = unknown

export type ImagesDeleteImageData = {
  filename: string
}

export type ImagesDeleteImageResponse = unknown

export type ItemsReadItemsData = {
  limit?: number
  skip?: number
}

export type ItemsReadItemsResponse = ItemsPublic

export type ItemsCreateItemData = {
  requestBody: ItemCreate
}

export type ItemsCreateItemResponse = ItemPublic

export type ItemsReadItemData = {
  id: string
}

export type ItemsReadItemResponse = ItemPublic

export type ItemsUpdateItemData = {
  id: string
  requestBody: ItemUpdate
}

export type ItemsUpdateItemResponse = ItemPublic

export type ItemsDeleteItemData = {
  id: string
}

export type ItemsDeleteItemResponse = Message

export type LoginLoginAccessTokenData = {
  formData: Body_login_login_access_token
}

export type LoginLoginAccessTokenResponse = Token

export type LoginTestTokenResponse = UserPublic

export type LoginRecoverPasswordData = {
  email: string
}

export type LoginRecoverPasswordResponse = Message

export type LoginResetPasswordData = {
  requestBody: NewPassword
}

export type LoginResetPasswordResponse = Message

export type LoginRecoverPasswordHtmlContentData = {
  email: string
}

export type LoginRecoverPasswordHtmlContentResponse = string

export type NomiReadNomiData = {
  lang?: string | null
  limit?: number
  pictogramId?: number | null
  skip?: number
}

export type NomiReadNomiResponse = Array<Nome>

export type NomiCreateNomeData = {
  requestBody: NomeCreate
}

export type NomiCreateNomeResponse = Nome

export type NomiReadNomeData = {
  nomeId: number
}

export type NomiReadNomeResponse = Nome

export type NomiUpdateNomeData = {
  nomeId: number
  requestBody: NomeUpdate
}

export type NomiUpdateNomeResponse = Nome

export type NomiDeleteNomeData = {
  nomeId: number
}

export type NomiDeleteNomeResponse = Nome

export type NomiReadNomiByPictogramData = {
  lang?: string | null
  pictogramId: number
}

export type NomiReadNomiByPictogramResponse = Array<Nome>

export type NomiSearchNomiData = {
  lang?: string | null
  /**
   * Search query
   */
  q: string
}

export type NomiSearchNomiResponse = Array<Nome>

export type PecsGetAllPecsData = {
  /**
   * Filter by language code
   */
  language?: string | null
  limit?: number
  skip?: number
}

export type PecsGetAllPecsResponse = Array<PECSRead>

export type PecsCreatePecsData = {
  requestBody: PECSCreate
}

export type PecsCreatePecsResponse = PECSRead

export type PecsGetCustomPecsData = {
  limit?: number
  skip?: number
}

export type PecsGetCustomPecsResponse = Array<PECSRead>

export type PecsGetPecsByLanguageData = {
  code: string
  limit?: number
  skip?: number
}

export type PecsGetPecsByLanguageResponse = Array<PECSRead>

export type PecsGetPecsData = {
  pecsId: string
}

export type PecsGetPecsResponse = PECSRead

export type PecsUpdatePecsData = {
  pecsId: string
  requestBody: PECSUpdate
}

export type PecsUpdatePecsResponse = PECSRead

export type PecsDeletePecsData = {
  pecsId: string
}

export type PecsDeletePecsResponse = Message

export type PecsGetPecsCategoriesData = {
  pecsId: string
}

export type PecsGetPecsCategoriesResponse = Array<CategoryWithTranslations>

export type PhrasesGetAllPhrasesData = {
  limit?: number
  skip?: number
}

export type PhrasesGetAllPhrasesResponse = Array<PhraseRead>

export type PhrasesCreatePhraseData = {
  requestBody: PhraseCreate
}

export type PhrasesCreatePhraseResponse = PhraseRead

export type PhrasesGetPhrasesByLanguageData = {
  code: string
  limit?: number
  skip?: number
}

export type PhrasesGetPhrasesByLanguageResponse = Array<PhraseRead>

export type PhrasesGetPhraseData = {
  phraseId: string
}

export type PhrasesGetPhraseResponse = PhraseRead

export type PhrasesUpdatePhraseData = {
  phraseId: string
  requestBody: PhraseUpdate
}

export type PhrasesUpdatePhraseResponse = PhraseRead

export type PhrasesDeletePhraseData = {
  phraseId: string
}

export type PhrasesDeletePhraseResponse = Message

export type PhrasesGetPecsInPhraseData = {
  phraseId: string
}

export type PhrasesGetPecsInPhraseResponse = Array<PhrasePECSRead>

export type PhrasesAddPecsToPhraseData = {
  pecsId: string
  phraseId: string
  /**
   * Position of the PECS in the phrase
   */
  position: number
}

export type PhrasesAddPecsToPhraseResponse = PhrasePECSRead

export type PhrasesUpdatePecsPositionInPhraseData = {
  pecsId: string
  phraseId: string
  /**
   * New position of the PECS in the phrase
   */
  position: number
}

export type PhrasesUpdatePecsPositionInPhraseResponse = PhrasePECSRead

export type PhrasesRemovePecsFromPhraseData = {
  pecsId: string
  phraseId: string
}

export type PhrasesRemovePecsFromPhraseResponse = Message

export type PhrasesGetPecsImageUrlData = {
  pecsId: string
}

export type PhrasesGetPecsImageUrlResponse = ImageURLResponse

export type PostsReadPostsData = {
  limit?: number
  skip?: number
}

export type PostsReadPostsResponse = PostsPublic

export type PostsCreatePostData = {
  requestBody: PostCreate
}

export type PostsCreatePostResponse = PostPublic

export type PostsHelloWorldResponse = Message

export type PostsReadPostData = {
  id: string
}

export type PostsReadPostResponse = PostPublic

export type PostsUpdatePostData = {
  id: string
  requestBody: PostUpdate
}

export type PostsUpdatePostResponse = PostPublic

export type PostsDeletePostData = {
  id: string
}

export type PostsDeletePostResponse = Message

export type PrivateCreateUserData = {
  requestBody: PrivateUserCreate
}

export type PrivateCreateUserResponse = UserPublic

export type TranslationsGetPecsTranslationsData = {
  pecsId: string
}

export type TranslationsGetPecsTranslationsResponse = Array<PECSTranslationRead>

export type TranslationsAddPecsTranslationData = {
  pecsId: string
  requestBody: {
    [key: string]: string
  }
}

export type TranslationsAddPecsTranslationResponse = PECSTranslationRead

export type TranslationsUpdatePecsTranslationData = {
  languageCode: string
  pecsId: string
  requestBody: {
    [key: string]: string
  }
}

export type TranslationsUpdatePecsTranslationResponse = PECSTranslationRead

export type TranslationsGetCategoryTranslationsData = {
  categoryId: string
}

export type TranslationsGetCategoryTranslationsResponse =
  Array<CategoryTranslationRead>

export type TranslationsAddCategoryTranslationData = {
  categoryId: string
  requestBody: {
    [key: string]: string
  }
}

export type TranslationsAddCategoryTranslationResponse = CategoryTranslationRead

export type TranslationsUpdateCategoryTranslationData = {
  categoryId: string
  languageCode: string
  requestBody: {
    [key: string]: string
  }
}

export type TranslationsUpdateCategoryTranslationResponse =
  CategoryTranslationRead

export type UsersReadUsersData = {
  limit?: number
  skip?: number
}

export type UsersReadUsersResponse = UsersPublic

export type UsersCreateUserData = {
  requestBody: UserCreate
}

export type UsersCreateUserResponse = UserPublic

export type UsersReadUserMeResponse = UserPublic

export type UsersDeleteUserMeResponse = Message

export type UsersUpdateUserMeData = {
  requestBody: UserUpdateMe
}

export type UsersUpdateUserMeResponse = UserPublic

export type UsersUpdatePasswordMeData = {
  requestBody: UpdatePassword
}

export type UsersUpdatePasswordMeResponse = Message

export type UsersRegisterUserData = {
  requestBody: UserRegister
}

export type UsersRegisterUserResponse = UserPublic

export type UsersReadUserByIdData = {
  userId: string
}

export type UsersReadUserByIdResponse = UserPublic

export type UsersUpdateUserData = {
  requestBody: UserUpdate
  userId: string
}

export type UsersUpdateUserResponse = UserPublic

export type UsersDeleteUserData = {
  userId: string
}

export type UsersDeleteUserResponse = Message

export type UtilsTestEmailData = {
  emailTo: string
}

export type UtilsTestEmailResponse = Message

export type UtilsHealthCheckResponse = boolean

export type UtilsDbCheckResponse = Message
